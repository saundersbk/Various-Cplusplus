/****************************************************************************
* Project number: 1
*
* Programmer: Brandon Saunders
*
* Submission Date: 09/12/2017
*
* EGRE 246 Fall 2017
*
* Pledge: I have neither given nor received unauthorized aid on the program.
*
* Description: Program a Tic-Tac-Toe game.
*
*
***************************************************************************/

#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

void display(char board[3][3]);
bool filled(char board[3][3]);
bool winner(char board[3][3]);

int main() {
	char gameBoard[3][3];
	int i, j, x, y;
	int cpux, cpuy;
	srand(time(0));
	char row, column;
	bool draw = false;
	bool win = false;
	bool spaceTaken = true;
	
	for (i = 0; i < 3; ++i) {
		for (j = 0; j < 3; ++j) {
			gameBoard[i][j] = ' ';
		}
	}
	
	while (draw == false && win == false) {
		cout << "Please choose a Row and Column (X)" << endl;
		display(gameBoard);
		while (spaceTaken == true) {
		cout << "Row - ";
		cin  >> row;
		if (row != '1' && row != '2' && row != '3') {
			while (row != '1' && row != '2' && row != '3') {
				cout << "Please choose an appropriate Row (1 to 3)" << endl;
				cout << "Row - ";
				cin  >> row;
			}
		}
		if (row == '1')
			x = 0;
		else if (row == '2')
			x = 1;
		else
			x = 2;
		cout << "Column - ";
		cin  >> column;
		if (column != 'A' && column != 'B' && column != 'C' && column != 'a' && column != 'b' && column != 'c') {
			while (column != 'A' && column != 'B' && column != 'C' && column != 'a' && column != 'b' && column != 'c') {
				cout << "Please choose an appropriate Column (A through C)" << endl;
				cout << "Column - ";
				cin  >> column;
			}
		}
		if (column == 'A' || column == 'a')
			y = 0;
		else if (column == 'B' || column == 'b')
			y = 1;
		else
			y = 2;
		if (gameBoard[x][y] == ' ') {
			spaceTaken = false;
			gameBoard[x][y] = 'X';
		}
		else {
			spaceTaken = true;
			cout << "Space is already taken" << endl;
		}
		}
		spaceTaken = true;
		draw = filled(gameBoard);
		win = winner(gameBoard);
		if (draw || win)
			return 0;
		
		while (spaceTaken == true) {
			cpux = rand() % 3;
			cpuy = rand() % 3;
			if (gameBoard[cpux][cpuy] == ' ') {
				spaceTaken = false;
				gameBoard[cpux][cpuy] = 'O';
			}
			else {
				spaceTaken = true;
			}
		}
		spaceTaken = true;
		draw = filled(gameBoard);
		win = winner(gameBoard);
		if (draw || win)
			return 0;
	}
	
	
	return 0;
}

void display(char board[3][3]) {
	cout << "   A   B   C   " << endl;
	cout << "     |   |     " << endl;
	cout << "1  " << board[0][0] << " | " << board[0][1] << " | " << board[0][2] << "   " << endl;
	cout << "     |   |     " << endl;
	cout << "  -----------  " << endl;
	cout << "     |   |     " << endl;
	cout << "2  " << board[1][0] << " | " << board[1][1] << " | " << board[1][2] << "   " << endl;
	cout << "     |   |     " << endl;
	cout << "  -----------  " << endl;
	cout << "     |   |     " << endl;
	cout << "3  " << board[2][0] << " | " << board[2][1] << " | " << board[2][2] << "   " << endl;
	cout << "     |   |     " << endl;
}

bool filled(char board[3][3]) {
	int i, j;
	int space = 0;
	for (i = 0; i < 3; ++i) {
		for (j = 0; j < 3; ++j) {
			if (board[i][j] == ' ') {
				++space;
			}
		}
	}
	if (space == 0) {
		display(board);
		cout << "Cat game" << endl;
		return true;
	}
	else
		return false;
}

bool winner(char board[3][3]) {
	if (board[0][0] == board[0][1] && board[0][1] == board[0][2] && board[0][0] != ' ') {
		if (board[0][0] == 'X') {
			display(board);
			cout << "Player 1 wins" << endl;
			return true;
		}
		else {
			display(board);
			cout << "Player 2 wins" << endl;
			return true;
		}
	}
	else if (board[1][0] == board[1][1] && board[1][1] == board[1][2] && board[1][0] != ' ') {
		if (board[1][0] == 'X') {
			display(board);
			cout << "Player 1 wins" << endl;
			return true;
		}
		else {
			display(board);
			cout << "Player 2 wins" << endl;
			return true;
		}
	}
	else if (board[2][0] == board[2][1] && board[2][1] == board[2][2] && board[2][0] != ' ') {
		if (board[2][0] == 'X') {
			display(board);
			cout << "Player 1 wins" << endl;
			return true;
		}
		else {
			display(board);
			cout << "Player 2 wins" << endl;
			return true;
		}
	}
	else if (board[0][0] == board[1][0] && board[1][0] == board[2][0] && board[0][0] != ' ') {
		if (board[0][0] == 'X') {
			display(board);
			cout << "Player 1 wins" << endl;
			return true;
		}
		else {
			display(board);
			cout << "Player 2 wins" << endl;
			return true;
		}
	}
	else if (board[0][1] == board[1][1] && board[1][1] == board[2][1] && board[0][1] != ' ') {
		if (board[0][1] == 'X') {
			display(board);
			cout << "Player 1 wins" << endl;
			return true;
		}
		else {
			display(board);
			cout << "Player 2 wins" << endl;
			return true;
		}
	}
	else if (board[0][2] == board[1][2] && board[1][2] == board[2][2] && board[0][2] != ' ') {
		if (board[0][2] == 'X') {
			display(board);
			cout << "Player 1 wins" << endl;
			return true;
		}
		else {
			display(board);
			cout << "Player 2 wins" << endl;
			return true;
		}
	}
	else if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ') {
		if (board[0][0] == 'X') {
			display(board);
			cout << "Player 1 wins" << endl;
			return true;
		}
		else {
			display(board);
			cout << "Player 2 wins" << endl;
			return true;
		}
	}
	else if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ') {
		if (board[0][2] == 'X') {
			display(board);
			cout << "Player 1 wins" << endl;
			return true;
		}
		else {
			display(board);
			cout << "Player 2 wins" << endl;
			return true;
		}
	}
	else {
		return false;
	}
}